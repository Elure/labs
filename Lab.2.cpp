#include <string.h> 
#include <iostream>

// Создаётся структура с двумя целочисленными переменными
struct TwoInts
{
    int a;
    int b;
};

struct StructWithArray
{
    int arr[4]; // Создаётся целочисленный массив из 4 элементов 
    int* someNumber; // Создаётся указатель 
};

int main()
{
    // Создаётся экземпляр первой структуры и инициализируется нулями
    TwoInts i2 = { };
    i2.a = 5; // Присваивание переменной а значения 5
    i2.b = 7; // Присваивание переменной b значения 7

    // Вывод обоих переменных
    std::cout << i2.a << std::endl;
    std::cout << i2.b << std::endl;
    
    StructWithArray s = { }; // Создание экземпляра второй структуры и инициализируется нулями
    s.arr[0] = 10; // Присваивание первому элементу массива числа 10

    StructWithArray s1 = { }; // Создание второго экземпляра второй структуры инициализируется нулями
    s1.arr[0] = 15; // Присваивание первому элементу массива числа 15

    StructWithArray* sPointer = &s; // Создаётся указатель, который хранит в себе ссылку на экземпляр s
    sPointer->arr[0] = 20; // Изменяется значение первого элемента массива

    std::cout << s.arr[0] << std::endl; // Вывод первого элемента массива экземпляра s
    s.arr[0] = 25; // Изменение значения элемента на 25
    std::cout << s.arr[0] << std::endl; // Вывод элемента (25)
    sPointer->arr[0] = 30; // Меняется значение первого элемента массива на 30 через указатель на экземпляр s
    std::cout << s.arr[0] << std::endl; // Вывод элемента (30)

    sPointer = &s1; // Перенаправляется указатель с экземпляра s на экземпляр s1
    sPointer->arr[0] = 35; // Изменение первого элемента из массива в s1 через указатель
    std::cout << s.arr[0] << std::endl; // Вывод первого элемента из массива из экземпляра s (30)
    std::cout << s1.arr[0] << std::endl; // Вывод первого элемента из массива из экземпляра s1 (35)

    StructWithArray structArray[2] = { }; // Создаётся массив экземпляров структуры StructWithArray
    structArray[0].arr[3] = 77; // Присваиваение четвёртому элементу массива первого экземпляра числа 77
    structArray[1].someNumber = &structArray[0].arr[3]; // В указатель someNumber второго экземпляра записывается адрес третьего элемента массива первого экземпляра

    sPointer = &s; // Возвращается указатель обратно на экземпляр s
    int* pointer = &sPointer->arr[3]; // Присваивается указателю pointer адрес третьего элемента массива экземпляра s
    s.arr[3] = 72; // Присваивание четвёртому элементу массива экземпляра s числа 72
    std::cout << *pointer; // Вывод значения (72)

    StructWithArray memory; // Создаётся экземпляр структуры StructWithArray
    memset(&memory, 0, sizeof(StructWithArray)); // При помощи функции memset, заполняется вся данная структура нулями
    return 0;
}